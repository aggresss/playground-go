// Code generated by MockGen. DO NOT EDIT.
// Source: ubermock (interfaces: Foo)
//
// Generated by this command:
//
//	mockgen -typed -package ubermock -destination mock_foo_test.go ubermock Foo
//
// Package ubermock is a generated GoMock package.
package ubermock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFoo is a mock of Foo interface.
type MockFoo struct {
	ctrl     *gomock.Controller
	recorder *MockFooMockRecorder
}

// MockFooMockRecorder is the mock recorder for MockFoo.
type MockFooMockRecorder struct {
	mock *MockFoo
}

// NewMockFoo creates a new mock instance.
func NewMockFoo(ctrl *gomock.Controller) *MockFoo {
	mock := &MockFoo{ctrl: ctrl}
	mock.recorder = &MockFooMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFoo) EXPECT() *MockFooMockRecorder {
	return m.recorder
}

// Bar mocks base method.
func (m *MockFoo) Bar(arg0 int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bar", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// Bar indicates an expected call of Bar.
func (mr *MockFooMockRecorder) Bar(arg0 any) *FooBarCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bar", reflect.TypeOf((*MockFoo)(nil).Bar), arg0)
	return &FooBarCall{Call: call}
}

// FooBarCall wrap *gomock.Call
type FooBarCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *FooBarCall) Return(arg0 int) *FooBarCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *FooBarCall) Do(f func(int) int) *FooBarCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *FooBarCall) DoAndReturn(f func(int) int) *FooBarCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
